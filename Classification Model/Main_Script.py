# -*- coding: utf-8 -*-
"""Supervised Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cmM0a8vthdPNR-7ub2yJlCj2zRtTIydi
"""

from google.colab import drive ,files 
drive.mount('/content/gdrive')



#Import Libraries
import pandas as pd
import numpy as np
import tensorflow as tf
from random import seed
import random
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import keras
from sklearn.metrics import accuracy_score, precision_score, recall_score,f1_score , classification_report
df = pd.read_excel('/content/gdrive/My Drive/Dataset2Use_Assignment1.xlsx')
#dropping the year column
df = df.iloc[:, :-1]

#normalising the column values (Same thing as MinMax Scaler)
df_scaled=(df-df.min())/(df.max()-df.min())
print(df_scaled)
#input and output 
X=df_scaled.iloc[:,:-1]     
y=df_scaled.iloc[:,-1]

#Creating the lists for the excel

Training_or_test_set=['Train','Test']*7
Number_of_Samples=[]
Number_of_non_healthy_companies_in_sample=[]
TP=[]
TN=[]
FP=[]
FN=[]
Precision=[]
Recall=[]
F1_Score=[]
Accuracy=[]

"""# LOGISTIC REGRESSION"""

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression()
#fit the model using the training data
logreg.fit(X_train, y_train) 
y_pred_test=logreg.predict(X_test)
y_pred_train = logreg.predict(X_train)

#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))

# now check for both train and test data, how well the model learned the patterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of LogisticRegression classifier are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of LogisticRegression classifier are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of LogisticRegression classifier are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of LogisticRegression classifier are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))
#Have a look at the confusion Matrix
print(confusion_matrix(y_pred_test,y_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the values that we want in the correct Variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

"""# DECISION TREE CLASSIFIER"""

####DECISION TREE CLASSIFIER#######
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(max_depth=8, random_state=0)
#fit the model using the training data
clf.fit(X_train, y_train) 
y_pred_train = clf.predict(X_train)
y_pred_test = clf.predict(X_test)

# now check for both train and test data, how well the model learned thepatterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of DecisionTreeClassifier are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of DecisionTreeClassifier are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of DecisionTreeClassifier are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of DecisionTreeClassifier are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))
#Have a look at the confusion Matrix
print(confusion_matrix(y_pred_test,y_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the values that we want in the correct Variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

"""# KNN NEIGHBORS"""

#####KN NEIGHBORS##########
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()
#fit the model using the training data
knn.fit(X_train, y_train)
y_pred_train = knn.predict(X_train)
y_pred_test = knn.predict(X_test)

# now check for both train and test data, how well the model learned thepatterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of KNeighborsClassifier are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of KNeighborsClassifier are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of KNeighborsClassifier are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of KNeighborsClassifier are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))
#Have a look at the confusion Matrix
print(confusion_matrix(y_pred_test,y_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the values that we want in the correct Variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

"""# LINEAR DISCRIMINANT ANALYSIS"""

###### Linear Discriminant Analysis
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
lda = LinearDiscriminantAnalysis()
#fit the model using the training data
lda.fit(X_train, y_train)
y_pred_train = lda.predict(X_train)
y_pred_test = lda.predict(X_test)

# now check for both train and test data, how well the model learned thepatterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of LinearDiscriminantAnalysis classifier are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of LinearDiscriminantAnalysis classifier are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of LinearDiscriminantAnalysis classifier are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of LinearDiscriminantAnalysis classifier are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))
#Have a look at the confusion matrix
print(confusion_matrix(y_pred_test,y_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the values that we want in the correct Variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

"""# GAUSSIAN NAYVE BAYES"""

#### NAIVE BAYES####
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
#fit the model using the training data
gnb.fit(X_train, y_train)
y_pred_train = gnb.predict(X_train)
y_pred_test = gnb.predict(X_test)

# now check for both train and test data, how well the model learned thepatterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of NAIVE BAYES classifier are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of NAIVE BAYES classifier are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of NAIVE BAYES classifier are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of NAIVE BAYES classifier are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))
#Have a look at the confusion matrix
print(confusion_matrix(y_pred_test,y_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the values that we want in the correct Variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

"""# SVM"""

#### SVM
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
from sklearn.svm import SVC
svm = SVC()
#fit the model using the training data
svm.fit(X_train, y_train)
y_pred_train = svm.predict(X_train)
y_pred_test = svm.predict(X_test)

# now check for both train and test data, how well the model learned thepatterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of Support Vector Machines classifier are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of Support Vector Machines classifier are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of Support Vector Machines classifier are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of Support Vector Machines classifier are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))
#Have a look at the confusion matrix
print(confusion_matrix(y_pred_test,y_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the values that we want in the correct Variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

"""# NEURAL NETWORKS"""

#### NEURAL NETWorKS

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
#finally, build a feed forward neural network using keras
tf.random.set_seed(1)
CustomModel = keras.models.Sequential()
CustomModel.add(keras.layers.Dense(16, input_dim=X_train.shape[1],activation='relu'))
CustomModel.add(keras.layers.Dense(8,activation='relu'))
CustomModel.add(keras.layers.Dense(2, activation='softmax'))
#compile model using accuracy to measure model performance
CustomModel.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'])
CustomModel.fit(X_train, keras.utils.np_utils.to_categorical(y_train,2),epochs=100)

y_pred_train = np.argmax(CustomModel.predict(X_train),axis=1)
y_pred_test = np.argmax(CustomModel.predict(X_test),axis=1)

# now check for both train and test data, how well the model learned thepatterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train,)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of neural network classifier are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of neural network classifier are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of neural networks classifier are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of neural network classifier are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))
#Have a look at the confusion matrix
print(confusion_matrix(y_pred_test,y_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the values that we want in the correct Variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

####################################### Creating the excel
df_to_excel=pd.DataFrame( index=['Logistic Regression','Logistic Regression','Decision Trees',\
                                 'Decision Trees','k-Nearest Neighbors','k-Nearest Neighbors',\
                                 'Linear Discriminant Analysis','Linear Discriminant Analysis',\
                                 'Naïve Bayes','Naïve Bayes','Support Vector Machines',\
                                 'Support Vector Machines','Neural Networks','Neural Networks'],\
                         columns=['Training or test set','Number of Samples','Number of non healthy companies in sample',\
                                  'TP','TN','FP','FN','Precision','Recall','F1 Score','Accuracy'])
df_to_excel['Training or test set']=Training_or_test_set
df_to_excel['Number of Samples']=Number_of_Samples
df_to_excel['Number of non healthy companies in sample']=Number_of_non_healthy_companies_in_sample
df_to_excel['TP']=TP
df_to_excel['TN']=TN
df_to_excel['FP']=FP
df_to_excel['FN']=FN
df_to_excel['Precision']=Precision
df_to_excel['Recall']=Recall
df_to_excel['F1 Score']=F1_Score
df_to_excel['Accuracy']=Accuracy
print(df_to_excel)

#Downloading the excel
df_to_excel.to_excel('Meros_A.xlsx')
files.download('Meros_A.xlsx')

########################################

df = pd.read_excel('/content/gdrive/My Drive/Dataset2Use_Assignment1.xlsx')
#dropping the year column
df = df.iloc[:, :-1] 
#normalising the column values
df_scaled=(df-df.min())/(df.max()-df.min())
print(df_scaled)
#input and output
X=df_scaled.iloc[:,:-1]
y=df_scaled.iloc[:,-1]

Training_or_test_set=['Train','Test']*7 #Creating the excel columns
Number_of_Samples=[]
Number_of_non_healthy_companies_in_sample=[]
TP=[]
TN=[]
FP=[]
FN=[]
Precision=[]
Recall=[]
F1_Score=[]
Accuracy=[]

"""# LOGISTIC REGRESSION"""

#Logistic Regression
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
number_of_healthy=0
number_nonhealthy=0
#Finding the number of non healthy and healthy companies
for a,b in y_train.items():
  if b==0:
    number_of_healthy+=1
  else:
    number_nonhealthy+=1
proper_number_healthy=number_nonhealthy*3
#Shuffling the X_train so i can drop the right amount of healthy companies and always have the same train set 
x=list(X_train.index)
random.Random(5).shuffle(x)
number_of_samples=number_of_healthy+number_nonhealthy
i=0
while number_of_samples != proper_number_healthy+number_nonhealthy:
  if y_train[x[i]]==1:
    pass
  else:
    y_train.drop(index=x[i],inplace=True)
    X_train.drop(index=x[i],inplace=True)
    number_of_samples-=1
  i=i+1
   
from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression()
logreg.fit(X_train, y_train) #fit the model using the training data
#now check for both train and test data, how well the model learned the patterns
y_pred_test=logreg.predict(X_test)
y_pred_train = logreg.predict(X_train)
#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))
print(confusion_matrix(y_pred_test,y_test))

# now check for both train and test data, how well the model learned thepatterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of LogisticRegression classifier are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of LogisticRegression classifier are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of LogisticRegression classifier are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of LogisticRegression classifier are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the values that we want in the correct variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

"""# DECISION TREE"""

#Decision Trees
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
number_of_healthy=0
number_nonhealthy=0
for a,b in y_train.items():
  if b==0:
    number_of_healthy+=1
  else:
    number_nonhealthy+=1
proper_number_healthy=number_nonhealthy*3

x=list(X_train.index)
random.Random(5).shuffle(x)

number_of_samples=number_of_healthy+number_nonhealthy
i=0
while number_of_samples != proper_number_healthy+number_nonhealthy:
  if y_train[x[i]]==1:
    pass
  else:
    y_train.drop(index=x[i],inplace=True)
    X_train.drop(index=x[i],inplace=True)
    number_of_samples-=1
  i=i+1

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(max_depth=8,random_state=1)
clf.fit(X_train, y_train) #fit the model using the training data
#now check for both train and test data, how well the model learned the patterns
y_pred_train = clf.predict(X_train)
y_pred_test = clf.predict(X_test)
#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))
print(confusion_matrix(y_pred_test,y_test))

# now check for both train and test data, how well the model learned thepatterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of DecisionTreeClassifier are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of DecisionTreeClassifier are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of DecisionTreeClassifier are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of DecisionTreeClassifier are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the values that we want in the correct variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

"""# KNN NEIGHBORS"""

#KNN NEIHBORS
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
number_of_healthy=0
number_nonhealthy=0
for a,b in y_train.items():
  if b==0:
    number_of_healthy+=1
  else:
    number_nonhealthy+=1
proper_number_healthy=number_nonhealthy*3

x=list(X_train.index)
random.Random(5).shuffle(x)

number_of_samples=number_of_healthy+number_nonhealthy
i=0
while number_of_samples != proper_number_healthy+number_nonhealthy:
  if y_train[x[i]]==1:
    pass
  else:
    y_train.drop(index=x[i],inplace=True)
    X_train.drop(index=x[i],inplace=True)
    number_of_samples-=1
  i=i+1

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()
knn.fit(X_train, y_train)
y_pred_train = knn.predict(X_train)
y_pred_test = knn.predict(X_test)
#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))
print(confusion_matrix(y_pred_test,y_test))

# now check for both train and test data, how well the model learned thepatterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of k-Nearest Neighbors are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of k-Nearest Neighbors are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of k-Nearest Neighbors are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of k-Nearest Neighbors are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the values that we want in the correct variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

"""# DISCRIMINANT ANALYSIS"""

#DISCRIMINANT ANALYSIS
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
number_of_healthy=0
number_nonhealthy=0
for a,b in y_train.items():
  if b==0:
    number_of_healthy+=1
  else:
    number_nonhealthy+=1
proper_number_healthy=number_nonhealthy*3

x=list(X_train.index)
random.Random(5).shuffle(x)

number_of_samples=number_of_healthy+number_nonhealthy
i=0
while number_of_samples != proper_number_healthy+number_nonhealthy:
  if y_train[x[i]]==1:
    pass
  else:
    y_train.drop(index=x[i],inplace=True)
    X_train.drop(index=x[i],inplace=True)
    number_of_samples-=1
  i=i+1

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
lda = LinearDiscriminantAnalysis()
lda.fit(X_train, y_train)
y_pred_train = lda.predict(X_train)
y_pred_test = lda.predict(X_test)
#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))
print(confusion_matrix(y_pred_test,y_test))

# now check for both train and test data, how well the model learned thepatterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of Discriminant Analysis are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of Discriminant Analysis are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of DDiscriminant Analysis are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of Discriminant Analysis are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the values that we want in the correct variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

"""# GAUSSIAN NAYVE BAYES"""

#Gaussin Naive Bayes
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
number_of_healthy=0
number_nonhealthy=0
for a,b in y_train.items():
  if b==0:
    number_of_healthy+=1
  else:
    number_nonhealthy+=1
proper_number_healthy=number_nonhealthy*3

x=list(X_train.index)
random.Random(5).shuffle(x)

number_of_samples=number_of_healthy+number_nonhealthy
i=0
while number_of_samples != proper_number_healthy+number_nonhealthy:
  if y_train[x[i]]==1:
    pass
  else:
    y_train.drop(index=x[i],inplace=True)
    X_train.drop(index=x[i],inplace=True)
    number_of_samples-=1
  i=i+1

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(X_train, y_train)
y_pred_train = gnb.predict(X_train)
y_pred_test = gnb.predict(X_test)
#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))
print(confusion_matrix(y_pred_test,y_test))

# now check for both train and test data, how well the model learned thepatterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of Gaussian - Naive - Bayes are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of Gaussian - Naive - Bayes are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of Gaussian - Naive - Bayes are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of Gaussian - Naive - Bayes are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the values that we want in the correct variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

"""# SVC"""

#Support Vector Machines
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
number_of_healthy=0
number_nonhealthy=0
for a,b in y_train.items():
  if b==0:
    number_of_healthy+=1
  else:
    number_nonhealthy+=1
proper_number_healthy=number_nonhealthy*3

x=list(X_train.index)
random.Random(5).shuffle(x)

number_of_samples=number_of_healthy+number_nonhealthy
i=0
while number_of_samples != proper_number_healthy+number_nonhealthy:
  if y_train[x[i]]==1:
    pass
  else:
    y_train.drop(index=x[i],inplace=True)
    X_train.drop(index=x[i],inplace=True)
    number_of_samples-=1
  i=i+1

from sklearn.svm import SVC
svm = SVC()
svm.fit(X_train, y_train)
y_pred_train = svm.predict(X_train)
y_pred_test = svm.predict(X_test)
#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))
print(confusion_matrix(y_pred_test,y_test))

# now check for both train and test data, how well the model learned thepatterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of Support Vector Machines are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of Support Vector Machines are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of Support Vector Machines are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of Support Vector Machines are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the values that we want in the correct variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

"""# NEURAL NETWORKS"""

#Neural Networks
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=1)
number_of_healthy=0
number_nonhealthy=0
for a,b in y_train.items():
  if b==0:
    number_of_healthy+=1
  else:
    number_nonhealthy+=1
proper_number_healthy=number_nonhealthy*3

x=list(X_train.index)
random.Random(5).shuffle(x)

number_of_samples=number_of_healthy+number_nonhealthy
i=0
while number_of_samples != proper_number_healthy+number_nonhealthy:
  if y_train[x[i]]==1:
    pass
  else:
    y_train.drop(index=x[i],inplace=True)
    X_train.drop(index=x[i],inplace=True)
    number_of_samples-=1
  i=i+1
#We also add a hidden layer with 4 neurons
tf.random.set_seed(1) 
CustomModel = keras.models.Sequential()
CustomModel.add(keras.layers.Dense(16, input_dim=X_train.shape[1],activation='relu'))
CustomModel.add(keras.layers.Dense(4,activation='relu'))
CustomModel.add(keras.layers.Dense(2, activation='softmax'))
#compile model using accuracy to measure model performance
CustomModel.compile(optimizer='adam', loss='categorical_crossentropy',metrics=['accuracy'])
CustomModel.fit(X_train, keras.utils.np_utils.to_categorical(y_train,2),epochs=100)

y_pred_train = np.argmax(CustomModel.predict(X_train),axis=1) #Predicting the class that has the highest probability 
y_pred_test = np.argmax(CustomModel.predict(X_test),axis=1)
#Better understanding the results
print("Number of non healthy in prediction:" + str(np.count_nonzero(y_pred_test==1)))
print('Number of actuall non healthy:' +str(np.count_nonzero(y_test==1)))
print("Number of non healthy in prediction of train set:" + str(np.count_nonzero(y_pred_train==1)))
print('Number of actuall non heaalthy in train set:' +str(np.count_nonzero(y_train==1)))
print(confusion_matrix(y_pred_test,y_test))

# now check for both train and test data, how well the model learned thepatterns
acc_train = accuracy_score(y_train, y_pred_train)
acc_test = accuracy_score(y_test, y_pred_test)
pre_train = precision_score(y_train, y_pred_train)
pre_test = precision_score(y_test, y_pred_test)
rec_train = recall_score(y_train, y_pred_train)
rec_test = recall_score(y_test, y_pred_test)
f1_train = f1_score(y_train, y_pred_train)
f1_test = f1_score(y_test, y_pred_test)
# print the scores
print('Accuracy scores of neural network classifier are: train: {0:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of neural network classifier are:','train: {:.2f}'.format(pre_train), 'and test:{:.2f}.'.format(pre_test))
print('Recall scores of neural networks classifier are:','train: {:.2f}'.format(rec_train), 'and test:{:.2f}.'.format(rec_test))
print('F1 scores of neural network classifier are:', 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

#Finally, we check the rate of success for our prediction
rate_non_healthy=(confusion_matrix(y_pred_test,y_test)[1][1])/(np.count_nonzero(y_test==1))
rate_healthy=(confusion_matrix(y_pred_test,y_test)[0][0])/(np.count_nonzero(y_test==0))
print('The rate that our model predicts the non healthy companies is:', rate_non_healthy)
print('The rate that our model predicts the healthy companies is:', rate_healthy)

#Appending the value that we want in the correct variable
Number_of_Samples.append(X_train.shape[0])
Number_of_Samples.append(X_test.shape[0])
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_train==1))
Number_of_non_healthy_companies_in_sample.append(np.count_nonzero(y_test==1))
TP.append(confusion_matrix(y_pred_train,y_train)[1][1])
TP.append(confusion_matrix(y_pred_test,y_test)[1][1])
TN.append(confusion_matrix(y_pred_train,y_train)[0][0])
TN.append(confusion_matrix(y_pred_test,y_test)[0][0])
FP.append(confusion_matrix(y_pred_train,y_train)[1][0])
FP.append(confusion_matrix(y_pred_test,y_test)[1][0])
FN.append(confusion_matrix(y_pred_train,y_train)[0][1])
FN.append(confusion_matrix(y_pred_test,y_test)[0][1])
Precision.append(pre_train)
Precision.append(pre_test)
Recall.append(rec_train)
Recall.append(rec_test)
F1_Score.append(f1_train)
F1_Score.append(f1_test)
Accuracy.append(acc_train)
Accuracy.append(acc_test)

#Saving all the metrics and results in an excel file
df_to_excel=pd.DataFrame( index=['Logistic Regression','Logistic Regression','Decision Trees',\
                                 'Decision Trees','k-Nearest Neighbors','k-Nearest Neighbors',\
                                 'Linear Discriminant Analysis','Linear Discriminant Analysis',\
                                 'Naïve Bayes','Naïve Bayes','Support Vector Machines',\
                                 'Support Vector Machines','Neural Networks','Neural Networks'],\
                         columns=['Training or test set','Number of Samples','Number of non healthy companies in sample',\
                                  'TP','TN','FP','FN','Precision','Recall','F1 Score','Accuracy'])
df_to_excel['Training or test set']=Training_or_test_set
df_to_excel['Number of Samples']=Number_of_Samples
df_to_excel['Number of non healthy companies in sample']=Number_of_non_healthy_companies_in_sample
df_to_excel['TP']=TP
df_to_excel['TN']=TN
df_to_excel['FP']=FP
df_to_excel['FN']=FN
df_to_excel['Precision']=Precision
df_to_excel['Recall']=Recall
df_to_excel['F1 Score']=F1_Score
df_to_excel['Accuracy']=Accuracy
print(df_to_excel)

df_to_excel.to_excel('Meros_B.xlsx')
files.download('Meros_B.xlsx')